=========================
NEXUS REPOSITORY MANAGER
=========================

1. Add New User
--------------
- Login as admin.
- Go to "Security" > "Users".
- Click "Create user".
- Fill username, email, password.
- Assign Roles (see next section).
- Save.

2. Create Role and Assign to User
---------------------------------
- Go to "Security" > "Roles".
- Click "Create role".
- Give role a name.
- Assign privileges (e.g., "nx-repository-view-*-*-read").
- Save role.
- Edit user, assign this role.
- Save user.

3. Create Repository
-------------------
- Go to "Repositories".
- Click "Create repository".
- Choose repository type (e.g., Maven hosted, npm hosted, Docker hosted).
- Configure repository details (name, version policy: release/snapshot).
- Save.

4. Push Artifacts from Maven
----------------------------
- Add this to your `pom.xml`:

  <distributionManagement>
    <repository>
      <id>nexus-releases</id>
      <url>http://localhost:8081/repository/maven-releases/</url>
    </repository>
    <snapshotRepository>
      <id>nexus-snapshots</id>
      <url>http://localhost:8081/repository/maven-snapshots/</url>
    </snapshotRepository>
  </distributionManagement>

- Add credentials to `~/.m2/settings.xml`:

  <servers>
    <server>
      <id>nexus-releases</id>
      <username>your-username</username>
      <password>your-password</password>
    </server>
    <server>
      <id>nexus-snapshots</id>
      <username>your-username</username>
      <password>your-password</password>
    </server>
  </servers>

- Run `mvn deploy` to upload.

5. Push Artifacts from Gradle
-----------------------------
- Add to `build.gradle`:

  publishing {
    repositories {
      maven {
        url = uri("http://localhost:8081/repository/maven-releases/")
        credentials {
          username = 'your-username'
          password = 'your-password'
        }
      }
    }
    publications {
      mavenJava(MavenPublication) {
        from components.java
      }
    }
  }

- Run `gradle publish`.

6. Check API Endpoints via CLI
------------------------------
- List repositories:

  curl -u admin:password -X GET "http://localhost:8081/service/rest/v1/repositories"

- List components (artifacts) in repo:

  curl -u admin:password -X GET "http://localhost:8081/service/rest/v1/components?repository=<repo-name>"

7. Check Artifacts Information
------------------------------
- Use API to get details on artifacts via components endpoint.
- Example:

  curl -u admin:password -X GET "http://localhost:8081/service/rest/v1/components?repository=maven-releases"

8. Blob Storage
---------------
- Nexus stores all binaries and artifacts in the Blob Storage.
- Blob Storage location is by default inside `<nexus-data>/blobs`.
- You can configure Blob Stores under "Administration" > "Repository" > "Blob Stores".
- Allows grouping storage, attaching to repositories.
- Helps in managing large binaries efficiently.
- Do not manually change blob files; use Nexus UI or API to manage artifacts.

Keep Nexus data backed up regularly.

