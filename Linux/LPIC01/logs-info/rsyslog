Syslog and Rsyslog – Full Explanation

- Syslog is a standardized protocol used in Unix-like systems for collecting and storing log messages generated by applications, daemons, and the system kernel. These log messages help system administrators and software developers understand what is happening on the system — such as authentication attempts, service errors, or user activity. The syslog protocol defines how messages are structured, classified (by facility and severity), and transmitted — usually over UDP port 514 by default.

- Rsyslog is a powerful and modern implementation of the syslog protocol. It acts as the syslog daemon on most Linux systems today. The main job of rsyslogd (the rsyslog daemon) is to collect logs from various sources, filter them based on rules, and store them in files, send them to a database, or forward them to a remote server. It is modular, meaning it uses different modules for input (where logs come from), filters and parsers (how logs are processed), and output (where logs go).

- By default, rsyslog reads from sources like /dev/log, which is a Unix domain socket where applications send their log messages. It also reads system logs using systemd’s journal through modules like imjournal, and kernel logs using imklog. These logs are then processed based on the rules written in its main config file, which is located at /etc/rsyslog.conf. This file controls where and how logs are written — for example, sending all authentication logs (authpriv.*) to /var/log/secure, or all informational messages to /var/log/messages. Additional configuration files can also be added in the /etc/rsyslog.d/ directory.

- Rsyslog is also capable of remote logging. That means it can either receive logs from other systems or send logs to a central log server. This is useful in enterprise environments where central log collection is critical for security and auditing. To send logs remotely, you can use *.* @remote-ip:514 (UDP) or @@remote-ip:514 (TCP). To accept remote logs, the server must load the appropriate input modules (e.g., imudp or imtcp) and listen on the correct port.

- One of rsyslog’s advanced features is support for databases. Using output modules like ommysql or ompgsql, logs can be stored directly into MySQL or PostgreSQL databases. This makes searching, analyzing, or visualizing logs easier using tools like Grafana, Kibana, or custom SQL queries. The spooling directory, located at /var/spool/rsyslog/, is used for buffering logs when output (e.g., a database) is temporarily unavailable.

- Rsyslog also integrates with log rotation, which is handled by the logrotate utility. Logrotate prevents log files from growing too large by compressing and archiving old logs and creating fresh ones. Its main configuration is in /etc/logrotate.conf, and specific rules for services like rsyslog can be found in /etc/logrotate.d/. This ensures that logs are managed efficiently and disk space is preserved.

- Overall, rsyslog plays a central role in Linux system logging. It captures messages from every part of the system, organizes them, applies rules, and saves or forwards them. It is highly configurable, reliable under load (thanks to its queuing system), and essential for monitoring, debugging, and securing a Linux server.

1. Syslog – Protocol

- Syslog is a standardized logging protocol (RFC 5424).

Defines:
- Facilities (source/type of message: auth, cron, daemon, etc.)
- Severity levels (from debug to emerg)
- Message format
- Transport methods: UDP 514 (default), TCP, RELP

2. Rsyslog – Implementation
- rsyslog is a modern syslog daemon.
- More powerful than syslogd or syslog-ng.

Key features:
- Modular architecture (input, parsing, output)
- Supports DB backends (MySQL, PostgreSQL)
- Remote logging via TCP/UDP/RELP
- Log queueing and buffering
- Message filtering and formatting
- TLS encryption
- JSON and structured logging

3. File and Directory Structure

--------------------------------------------------------------------
Path						Purpose
--------------------------------------------------------------------
/etc/rsyslog.conf	    	Main config file
/etc/rsyslog.d/*.conf		Additional config snippets
/var/spool/rsyslog/			Spool directory (queued unsent logs)
/var/log/					Default log file storage
/dev/log					UNIX domain socket for local app logging
--------------------------------------------------------------------

4. Daemon Info

-----------------------------------------------
Name		Description
-----------------------------------------------
rsyslogd	Rsyslog daemon (runs in background)
-----------------------------------------------

$ systemctl start rsyslog
$ systemctl restart rsyslog
$ systemctl status rsyslog

5. Basic Rule Syntax

FACILITY.PRIORITY    ACTION

Examples:

	authpriv.*      /var/log/secure
*.info          /var/log/messages
*.emerg         *

-------------------------------------------------------
Field			Meaning
-------------------------------------------------------
FACILITY		Log source (e.g. auth, cron)
PRIORITY		Severity level (debug, info, err, etc.)
ACTION	    	File, DB, or remote destination
-------------------------------------------------------

6. Rsyslog Modules

-----------------------------------------------------------------
Module			Type		Function
-----------------------------------------------------------------
imuxsock		Input		Reads from /dev/log
imjournal		Input		Reads from systemd-journald
imklog			Input	    Reads kernel logs
imudp	        Input	    Accepts logs via UDP
imtcp			Input	    Accepts logs via TCP
omfile			Output	    Writes to file
ommysql			Output	    Sends logs to MySQL
ompgsql			Output	    Sends logs to PostgreSQL
omfwd	    	Output	    Forwards logs to remote syslog server
omrelp	        Output	    Forwards logs using RELP
------------------------------------------------------------------

List modules:

$ rsyslogd -v

7. Remote Logging Setup

- Send logs to a remote server

*.*  @192.168.1.100:514     # UDP
*.*  @@192.168.1.100:514    # TCP

- Accept logs on remote server

Add to /etc/rsyslog.conf:

module(load="imudp")
input(type="imudp" port="514")

module(load="imtcp")
input(type="imtcp" port="514")

8. Logging to Databases

- Load required output modules

module(load="ommysql")    # For MySQL
module(load="ompgsql")    # For PostgreSQL

Configuration example
*.* :ommysql:127.0.0.1,syslogdb,user,password

9. Log Rotation – logrotate
- Tool to manage log file size and backups.
- Installed by default.
- Controlled via:

------------------------------------------------------------
Path					Purpose
------------------------------------------------------------
/etc/logrotate.conf		Global logrotate settings
/etc/logrotate.d/		App-specific configs (e.g., rsyslog)
------------------------------------------------------------

Sample /etc/logrotate.d/rsyslog

/var/log/messages {
    weekly
    rotate 4
    compress
    delaycompress
    missingok
    notifempty
}

10. Real-Time Log Monitoring

$ tail -f /var/log/messages
$ journalctl -f             # Systemd log following
$ journalctl -xe            # Show latest errors

11. Rsyslog Internal Flow

[Application] 
     ↓
   /dev/log or journald
     ↓
 [Input Module: imuxsock / imjournal]
     ↓
 [Rules: filters based on facility/priority]
     ↓
 [Action: file, DB, remote, etc.]

12. Security Recommendations

- Use RELP or TCP+TLS for secure remote logging.
- Restrict log file access with permissions (chmod 600).
- Apply rate limiting to avoid log storms.
- Avoid logging sensitive user data in plaintext.

------------------------------------------------------  
Topic					Tool/Path
------------------------------------------------------
Main daemon				rsyslogd
Main config				/etc/rsyslog.conf
Extra config files		/etc/rsyslog.d/*.conf
Local logging			/var/log/*.log
DB support				ommysql, ompgsql
Remote logging			omfwd, omrelp, imudp, imtcp
Queuing					/var/spool/rsyslog/
Log rotation			logrotate, /etc/logrotate.conf
Live log viewing	    tail, journalctl
------------------------------------------------------
