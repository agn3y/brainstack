------------------------------------------------------------
### Very Important Information ###

1. /etc/shadow - for password related information for user
2. /etc/gshadow - for password related information for group
------------------------------------------------------------

Correct Password Hash Formats in `/etc/shadow`

The format is:  

`$algorithm$salt$hash`  

Here’s what the `$number$` prefixes actually mean:

----------------------------------------------------------------------------------------------
|  Prefix  				 | Hashing Algorithm    | Example                     				 |
|------------------------|----------------------|--------------------------------------------|			
| `$1$`   				 | MD5** (old, weak)    | `$1$salt$hash`                             |
| `$2a$`, `$2b$`, `$2y$` | Blowfish (bcrypt)    | `$2a$10$salt...$hash`       				 |
| `$5$`   				 | SHA-256              | `$5$rounds=5000$salt$hash`  				 |
| `$6$`   				 | SHA-512 (stronger)   | `$6$rounds=5000$salt$hash`   				 |
| `$argon2id$` 			 | Argon2 (modern) 		| `$argon2id$v=19$m=65536,t=3,p=4$salt$hash` |
----------------------------------------------------------------------------------------------


Your Mistakes :

1. `$1...5$` does NOT mean MD5
   - Only `$1$` means MD5.  
   - `$2$`, `$3$`, `$4$`, `$5$` are different algorithms (and some don’t even exist).  

2. `$5$` is SHA-256, NOT MD5  
   - `$5$` is always SHA-256, not "5 or more digits."  
   - `$6$` is SHA-512 (even stronger).  

3.  MD5 (`$1$`) is weak and outdated  
   - Modern systems use SHA-512 (`$6$`)** or **bcrypt (`$2a$`).

How to Check a Hash?

$ cat /etc/shadow | grep "username"

Example output:  

user1:$6$rounds=5000$s4ltValUe$H4sh...:19189:0:99999:7:::

- `$6$` → SHA-512  
- `$5$` → SHA-256
- `$1$` → MD5 (avoid this!)  

Summary:

`$1$` = MD5** (weak, outdated)  
`$5$` = SHA-256
`$6$` = SHA-512 (better)  
`$2a$` = bcrypt (even stronger)  

Never assume `$1...5$` means MD5—only `$1$` does!  


# Some additional explanation :

root : $1$UFb1tp3oKolH8pcW$o0Xa9/YIXdQQk4SaB8twTN5EdV6QvbYGGwRcFmlr8/dO6ciRPz/B1ILf90::0:99999:7:::

--------------------------------------------------------------------------------------------------------------------------
Field	Meaning																Example (root:...:19189:0:99999:7:::)
--------------------------------------------------------------------------------------------------------------------------
  1		Username															root
  2		Password Hash (format: $algorithm$salt$hash)						$1$UFb1tp3o$KolH8pcW...
  3		Last password change (days since Unix epoch: Jan 1, 1970)	    	19189 = July 21, 2022
  4		Minimum days between changes (0 = can change anytime)	    	    0
  5		Maximum days before change required									99999 ≈ 273 years (effectively "never expire")
  6		Warning period (days before expiry to warn user)					7 = 1-week warning
  7		Inactivity grace period (days after expiry to disable account)		Empty = no grace period
  8		Account expiration date (days since epoch)							Empty = no expiration
  9		Reserved field (unused)												Empty
--------------------------------------------------------------------------------------------------------------------------


# Make user change password every particular frame of time:
# Enforcing password changing required for like i.e, for 1 week or 1 month
$ man chage 		# yes its chage not change

# To see aging information
$ chage -l username

# Maximum number of days password need to change
$ chage -M  50 username 

# To change  warning message
$ chage -W 5 username

# To Make it more Interactive
$ sudo chage username			# ask for every needed information
